import sys, pygame
import itertools
import random

pygame.init()

#COLORS
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (200, 0, 0)

LINK_SIZE = 6
LINK_SPACING = 4
SCREEN_WIDTH = 240
SCREEN_HEIGHT = 240


class snakeLink:
    def __init__(self, direction, xPosition, yPosition):
        self.linkSize = LINK_SIZE + LINK_SPACING
        self.direction = direction
        self.xPosition = xPosition
        self.yPosition = yPosition

    def setDirection(self, newDirection):
        self.direction = newDirection

    def getXPosition(self):
        return self.xPosition

    def getYPosition(self):
        return self.yPosition

    def getDirection(self):
        return self.direction

    def getOffset(self):
        if self.direction == 'r':
            return self.xPosition - self.linkSize, self.yPosition
        elif self.direction == 'l':
            return self.xPosition + self.linkSize, self.yPosition
        elif self.direction == 'u':
            return self.xPosition, self.yPosition + self.linkSize
        else:
            return self.xPosition, self.yPosition - self.linkSize

    def getXOffset(self):
        """X Offset for new link generation"""
        if self.direction == 'r':
            return (-1) * self.linkSize
        else:
            return self.linkSize

    def getYOffest(self):
        """Y Offset for new link generation"""
        if self.direction == 'u':
            return (-1) * self.linkSize
        else:
            return self.linkSize

    def moveLink(self):
        if self.direction == 'r':
            self.xPosition += self.linkSize
        elif self.direction == 'l':
            self.xPosition -= self.linkSize
        elif self.direction == 'u':
            self.yPosition -= self.linkSize
        else:
            self.yPosition += self.linkSize

class foodPiece:
    def __init__(self, xPos, yPos):
        self.xPos = xPos
        self.yPos = yPos

    def getXPosition(self):
        return self.xPos

    def getYPosition(self):
        return self.yPos


def addLink(oldSnake):
    """Adds a link to the end of the snake directly behind the last link"""

    #The final link of the snake in order to derive
    # the next link's location and direction
    finalLink = oldSnake[len(oldSnake) - 1]
    newdirection = finalLink.getDirection()
    newX, newY = finalLink.getOffset()

    oldSnake.append(snakeLink(newdirection, newX, newY))
    return oldSnake

def initializeSnake():
    snake = []
    #Create initial head link at arbitrarily chosen position
    snake.append(snakeLink('r', 50, 100))

    #Create 4 additional links behind head
    for i in range(4):
        snake = addLink(snake)
    return snake

def nextMoves(snake):
    """Shifts moves down the snake"""
    tempSnake = snake[:]
    tempSnake.reverse()
    for link in range(0, len(tempSnake) - 1):
        tempSnake[link].setDirection(tempSnake[link+1].getDirection())
    return snake

def isLegalMove(head, move):
    direction = head.getDirection()
    if direction == 'r' or direction == 'l':
        if move == 'r' or move == 'l':
            return False
        else:
            return True
    else:
        if move == 'u' or move == 'd':
            return False
        else:
            return True

def collision(snake, food = []):
    """Returns the object that the snake is colliding with

    :snake: snake array
    :returns: String of object the snake has collided with

    """
    headXPos = snake[0].getXPosition()
    headYPos = snake[0].getYPosition()
    for link in itertools.islice(snake, 1, len(snake) - 1):
        linkXPos = link.getXPosition()
        linkYPos = link.getYPosition()
        if linkXPos == headXPos and linkYPos == headYPos:
            return "self"
    if headXPos >= SCREEN_WIDTH + LINK_SIZE or headXPos < 0:
        return "wall"
    elif headYPos >= SCREEN_HEIGHT + LINK_SIZE or headYPos < 0:
        return "wall"

    for piece in food:
        if(piece.getXPosition() == headXPos
            and piece.getYPosition() == headYPos):
            food.remove(piece)
            return "food"


def addFood(food):
    xPos = random.randrange(0, SCREEN_WIDTH)
    xPos = xPos - (xPos % (LINK_SIZE + LINK_SPACING))
    yPos = random.randrange(0, SCREEN_HEIGHT)
    yPos = yPos - (yPos % (LINK_SIZE + LINK_SPACING))
    food.append(foodPiece(xPos, yPos))
    return food

def gameLoop():
    size = SCREEN_WIDTH, SCREEN_HEIGHT
    screen = pygame.display.set_mode(size)

    #End of Loop Boolean
    done = False

    clock = pygame.time.Clock()

    #Initialize Game Loop Variables
    snake = initializeSnake()
    numberOfFood = 0
    food = []


    while not done:

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    if isLegalMove(snake[0], 'u'):
                        snake[0].setDirection('u')
                elif event.key == pygame.K_DOWN:
                    if isLegalMove(snake[0], 'd'):
                        snake[0].setDirection('d')
                elif event.key == pygame.K_LEFT:
                    if isLegalMove(snake[0], 'l'):
                        snake[0].setDirection('l')
                elif event.key == pygame.K_RIGHT:
                    if isLegalMove(snake[0], 'r'):
                        snake[0].setDirection('r')
                elif event.key == pygame.K_SPACE:
                    snake = addLink(snake)

        # --- Game logic goes here ---
        #snake, numberOfFood = updateGame()
        for link in snake:
            link.moveLink()

        if collision(snake) == "food":
            snake = addLink(snake)
        elif collision(snake) == "self":
            break
        elif collision(snake) == "wall":
            break
        elif collision(snake, food) == "food":
            snake = addLink(snake)
            numberOfFood -= 1
            

        if numberOfFood < 3:
            food = addFood(food)
            numberOfFood += 1

        snake = nextMoves(snake)

        # Overwrite Screen White
        screen.fill(WHITE)

        # --- Render here ---
        for piece in food:
            pygame.draw.rect(screen, RED, [piece.getXPosition() + 1,
                piece.getYPosition() + 1, 4, 4])
        for link in snake:
            pygame.draw.rect(screen, BLACK, [link.getXPosition(),
                        link.getYPosition(), LINK_SIZE, LINK_SIZE])

        # Update Display
        pygame.display.flip()

        #Limit FPS
        clock.tick(10)

    pygame.quit()

def updateGame():

def main():
    gameLoop()

if __name__ == "__main__":
    main()
